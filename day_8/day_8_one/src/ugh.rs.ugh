use std::collections::HashMap;
use std::fs::File;
use std::io::{BufRead, BufReader, Lines};

fn main() {
    let file = File::open("test").unwrap();
    let mut lines = BufReader::new(file).lines();

    let moves = lines.next().unwrap();
    lines.next();

    let nodes = read_nodes(lines);
    dbg!("{}", nodes);
}

fn read_nodes(buffer: Lines<BufReader<File>>) -> Vec<Node> {
    let mut map = Vec::new();
    for line in buffer {
        let line = match line {
            Ok(line) => line,
            Err(_) => break,
        };
        let node = Node::new(line);
        map.push(node);
    }
    return map;
}

#[derive(Debug)]
struct Node {
    identity: String,
    left: String,
    right: String,
}

impl Node {
    fn new(line: String) -> Node {
        let split: Vec<&str> = line.split("=").collect();
        let node = split[0].trim().to_owned();
        let paths = split[1].replace("(", "").replace(")", "");
        let mut paths = paths.split(",").map(|path| path.trim().to_owned());
        let left = paths.next().unwrap();
        let right = paths.next().unwrap();
        return Node {
            identity: node,
            left,
            right,
        };
    }
}
